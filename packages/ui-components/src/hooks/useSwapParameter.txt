import useUSDCAddress from './useUsdc'
import { useAppStore } from '../state'
import { useEffect, useMemo } from 'react'
import { NativeCoinAddress } from '../constants/usdc'
import useQuote from './useQuote'
import { BigNumber, ethers } from 'ethers'
import useRelayerFeeRate from './useRelayerFeeRate'
import { perThousandRatioForFee, IncreasingPercentageValue, ThousandageValue } from '../utils'

export default function useSwapParameter() {
  const fromChainID = useAppStore(state => state.fromChainID)
  const toChainID = useAppStore(state => state.toChainID)

  const fromToken = useAppStore(state => state.fromToken)
  const toToken = useAppStore(state => state.toToken)
  const input = useAppStore(state => state.input)
  const setWillReceiveToken = useAppStore(state => state.setWillReceiveToken)
  const setQuoteLoading = useAppStore(state => state.setQuoteLoading)
  const { data: dataFee } = useRelayerFeeRate()
  const setFee = useAppStore(state => state.setFee)
  const setSrcGrossPrice = useAppStore(state => state.setSrcGrossPrice)
  const setDestGrossPrice = useAppStore(state => state.setDestGrossPrice)

  const setDestEstimatedReceived = useAppStore(state => state.setDestEstimatedReceived)
  const setDestMinimumReceived = useAppStore(state => state.setDestMinimumReceived)

  const usdcFrom = useUSDCAddress(fromChainID)
  const usdcTo = useUSDCAddress(toChainID)

  const isFromNeedSwap = useMemo(() => {
    if (fromChainID !== toChainID && fromToken?.address == usdcFrom) {
      return false
    } else {
      return true
    }
  }, [fromToken, usdcFrom, fromChainID, toChainID])

  const quoteDataSell = useQuote(isFromNeedSwap, true)

  // const quotebuyAmount = useMemo(() => {
  //   let fromNum: string | undefined

  //   if (isFromNeedSwap) {
  //     fromNum = quoteDataSell.data?.grossBuyAmount
  //   } else {
  //     fromNum = input
  //   }
  //   if (fromNum == undefined || dataFee == undefined) return undefined

  //   const result = perThousandRatioForFee(BigNumber.from(fromNum), dataFee)

  //   return result?.toString()
  // }, [quoteDataSell.data, isFromNeedSwap, input, dataFee])

  const isToNeedSwap = useMemo(() => {
    if (toToken?.address != usdcTo && fromChainID !== toChainID) {
      return true
    } else {
      return false
    }
  }, [toToken, usdcTo, fromChainID, toChainID])

  const slippageGrossBuyAmount = useMemo(() => {
    let fromNum: string | undefined
    setSrcGrossPrice('0')

    if (isFromNeedSwap) {
      if (quoteDataSell.data == undefined) {
        return
      }
      fromNum = quoteDataSell.data.grossBuyAmount || quoteDataSell.data.buyAmount
      fromNum = ThousandageValue(BigNumber.from(fromNum), 5).toString()
      setSrcGrossPrice(quoteDataSell.data.grossPrice)
      //Reduced values provide success rates
    } else {
      fromNum = input
    }
    return fromNum
  }, [isFromNeedSwap, input, quoteDataSell.data, setSrcGrossPrice])

  const quotebuyAmount = useMemo(() => {
    if (slippageGrossBuyAmount == undefined || dataFee == undefined) {
      return
    }

    const result = perThousandRatioForFee(BigNumber.from(slippageGrossBuyAmount), dataFee)
    if (fromChainID != toChainID) {
      setFee(BigNumber.from(slippageGrossBuyAmount).sub(BigNumber.from(result)).toString())
    } else {
      setFee('0')
    }

    return result
  }, [slippageGrossBuyAmount, dataFee, setFee, fromChainID, toChainID])

  const quoteDataBuy = useQuote(isToNeedSwap, false, quotebuyAmount)

  useEffect(() => {
    if (quoteDataSell.isloading || quoteDataBuy.isloading) {
      setQuoteLoading(true)
    } else if (quoteDataSell.isloading == false && quoteDataBuy.isloading == false) {
      setQuoteLoading(false)
    }
  }, [quoteDataSell, quoteDataBuy, setQuoteLoading])

  /*
        struct SellArgs {
        address sellToken;
        uint256 sellAmount;
        uint256 sellcallgas;
        bytes sellcalldata;
    }

    struct BuyArgs {
        bytes32 buyToken;
        uint256 guaranteedBuyAmount;
        uint256 buycallgas;
        bytes buycalldata;
    }
    */
  const sellArgs = useMemo(() => {
    if (fromToken == null || input == '0') return null
    if (isFromNeedSwap == true && quoteDataSell.data == undefined && slippageGrossBuyAmount == undefined) {
      return null
    }
    const sellToken = isFromNeedSwap ? (fromToken.address == '' ? NativeCoinAddress : fromToken.address) : usdcFrom
    const sellAmount = input
    const sellcallgas = isFromNeedSwap ? quoteDataSell.data?.gas : '0'
    const sellcalldata = isFromNeedSwap ? quoteDataSell.data?.data : '0x0000000000000000000000000000000000000000000000000000000000000000'

    const guaranteedBuyAmount = isFromNeedSwap ? slippageGrossBuyAmount : '0'

    return {
      sellToken,
      sellAmount,
      sellcallgas: IncreasingPercentageValue(sellcallgas, 100),
      sellcalldata,
      guaranteedBuyAmount,
      buyToken: quoteDataSell.data?.buyTokenAddress || ''
    }
  }, [isFromNeedSwap, fromToken, input, quoteDataSell.data, usdcFrom, slippageGrossBuyAmount])

  const buyArgs = useMemo(() => {
    setDestEstimatedReceived('0')
    setDestMinimumReceived('0')
    if (toToken == null) return null
    if (isToNeedSwap && quoteDataBuy.data == undefined) return null

    const buyToken = isToNeedSwap ? (toToken.address == '' ? NativeCoinAddress : toToken.address) : usdcTo

    const guaranteedBuyAmount = isToNeedSwap ? ThousandageValue(BigNumber.from(quoteDataBuy.data?.grossBuyAmount), 20) : quotebuyAmount || '0'

    const buycallgas = isToNeedSwap ? quoteDataBuy.data?.gas : '0'
    const buycalldata = isToNeedSwap ? quoteDataBuy.data?.data : '0x0000000000000000000000000000000000000000000000000000000000000000'
    if (buyToken == undefined) {
      return null
    }
    if (isToNeedSwap) {
      if (quoteDataBuy?.data) {
        setDestEstimatedReceived(quoteDataBuy?.data?.grossBuyAmount)
        setDestMinimumReceived(guaranteedBuyAmount.toString())
        setDestGrossPrice(ethers.utils.parseEther('1').div(ethers.utils.parseEther(quoteDataBuy.data.grossPrice)).toString())
      }
    }

    const buyTokenAddresds = ethers.utils.hexZeroPad(buyToken, 32)
    return {
      buyToken: buyTokenAddresds,
      guaranteedBuyAmount,
      buycallgas: IncreasingPercentageValue(buycallgas, 100),
      buycalldata
    }
    /**
         *   export type BuyArgsStruct = {
                    buyToken: BytesLike;
                    guaranteedBuyAmount: BigNumberish;
                    buycallgas: BigNumberish;
                    buycalldata: BytesLike;
            };
        */
  }, [isToNeedSwap, toToken, quoteDataBuy.data, quotebuyAmount, usdcTo, setDestGrossPrice, setDestEstimatedReceived, setDestMinimumReceived])

  useEffect(() => {
    console.log('- - usdc')
    setWillReceiveToken('0')
    if (isToNeedSwap) {
      if (quoteDataBuy.data?.grossBuyAmount == undefined) return
      setWillReceiveToken(quoteDataBuy.data?.grossBuyAmount)
    } else if (isFromNeedSwap) {
      if (quoteDataSell.data?.grossBuyAmount == undefined) return
      setWillReceiveToken(quoteDataSell.data?.grossBuyAmount)
    } else {
      setWillReceiveToken(input)
    }
  }, [setWillReceiveToken, isToNeedSwap, isFromNeedSwap, quoteDataBuy.data, quoteDataSell.data, input])

  // const swapError= useMemo(()=>{

  // },[quoteDataSell.error, quoteDataBuy.error])

  return {
    isFromNeedSwap,
    isToNeedSwap,
    sellArgs,
    buyArgs,
    error: quoteDataSell.error || quoteDataBuy.error
  }
}
